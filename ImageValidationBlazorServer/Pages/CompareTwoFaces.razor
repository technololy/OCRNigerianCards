
@page "/CompareTwoFace"
@inject IFileReaderService fileReader;
@inject IHttpClientFactory ClientFactory
@inject IToastService toastService


<div class="card">
    <div class="card-header">
        This process scans a two facial image and validates it

    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <h5 class="card-title">Select file 1 from gallery</h5>
                <input class="form-control-file" type="file" accept="image/*" @ref="elementReference1" capture @onchange="HandleSelected1" />
            </div>
            <div class="col-md-6">
                <h5 class="card-title">Select file 2 from gallery</h5>
                <input class="form-control-file" type="file" accept="image/*" @ref="elementReference2" capture @onchange="HandleSelected2" />
            </div>
        </div>

    </div>
</div>
<br />

<div class="row">

    @if (showDetails1)
    {

        <div class="card col-md-6 ">
            <img src="@imgData1" class="card-img-top img-thumbnail" style="width: 250px; height:250px" alt="your image" />
            <div class="card-body">
                <h5 class="card-title">Preview details of the selected file</h5>



                <ul class="list-group">
                    <li class="list-group-item">Name:@name1</li>
                    <li class="list-group-item">Size:@size1 </li>
                    <li class="list-group-item">Type:@type1</li>

                </ul>
                <br />

            </div>
        </div>

        <br />




    }



    @if (showDetails2)
    {

        <div class="card col-md-6 ">
            <img src="@imgData2" class="card-img-top img-thumbnail" style="width: 250px; height:250px" alt="your image" />
            <div class="card-body">
                <h5 class="card-title">Preview details of the selected file</h5>



                <ul class="list-group">
                    <li class="list-group-item">Name:@name2</li>
                    <li class="list-group-item">Size:@size2 </li>
                    <li class="list-group-item">Type:@type2</li>

                </ul>
                <br />

            </div>
        </div>

        <br />




    }
</div>

@if (ShowProcessButton)
{
    <br />

    <button class="btn btn-primary btn-lg btn-block mx-auto" @onclick="ShowProcessFormClick">Prepare Image Comparison</button>
    <br />

}
<br />
<div class="row">
    @if (ShowProcessForm)
    {
        <br />

        <div class="card col-md-6">
            <div class="card-header">
                You can go ahead and compare these images
            </div>
            <div class="card-body">
                <h5 class="card-title">Shameless data collection. Let's know who is using this service</h5>
                <p>Email OTP will be introduced later to validate email used</p>

                <div class="row">
                    <EditForm Model="@ValidateInput" OnValidSubmit="ComparisonProcessStart">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label class="form-label">Enter email</label>
                            <InputText class="form-control" @bind-Value="@ValidateInput.Email" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Enter username</label>

                            <InputText class="form-control" @bind-Value="@ValidateInput.UserName" />
                        </div>


                        @if (IsRunning)
                        {
                            <button class="btn btn-primary btn-lg btn-block mx-auto disabled" disabled><span class='fa-left fas fa-sync-alt spinning'></span>Please wait...</button>
                        }
                        else
                        {
                            <button class="btn btn-primary btn-outline-primary btn-lg btn-block mx-auto">Begin Facial Process</button>
                        }


                    </EditForm>



                </div>
            </div>
        </div>

    }
    <br />
    @if (showCompareDetails)
    {
        <div class="card col-md-6">
            <div class="card-header">
                Document Details
            </div>


            <ul class="list-group list-group-flush">
                <li class="list-group-item">Confidence: @documentData.data.Confidence</li>
                <li class="list-group-item">Are faces identical?: @documentData.data.IsIdentical</li>


            </ul>
        </div>
    }
    <br />
</div>


@code {

    private EditContext editContext;
    // HelperLib.SimilarFaces documentData;
    HelperLib.Verify.VerifyResult documentData;
    ElementReference elementReference1;
    ElementReference elementReference2;
    string name1;
    string name2;
    string Email;
    string UserName;
    long size1;
    string type1;
    string imgData1;
    string imgByte1;

    long size2;
    string type2;
    string imgData2;
    string imgByte2;
    bool ShowProcessButton;
    bool showDetails1;
    bool showDetails2;
    bool showCompareDetails;
    bool IsRunning;
    bool ShowAlerResult;
    bool ShowProcessForm;
    string AlertMessage;
    Models.ValidateInputModel ValidateInput = new Models.ValidateInputModel();


    async Task HandleSelected1()
    {
        var file = (await fileReader.CreateReference(elementReference1).EnumerateFilesAsync()).FirstOrDefault();
        var fileInfo = await file.ReadFileInfoAsync();
        name1 = fileInfo.Name;
        size1 = fileInfo.Size;
        type1 = fileInfo.Type;
        using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
        {
            var inputStream = new MemoryStream(ms.ToArray());
            imgByte1 = Convert.ToBase64String(inputStream.ToArray());
            imgData1 = "data:" + fileInfo.Type + ";base64," + imgByte1;
        }
        showDetails1 = true;
        if (showDetails1 && showDetails2)
        {
            ShowProcessButton = true;
        }
        else
        {
            ShowProcessButton = false;

        }
        ShowProcessForm = false;
        StateHasChanged();



    }

    async Task HandleSelected2()
    {
        var file = (await fileReader.CreateReference(elementReference2).EnumerateFilesAsync()).FirstOrDefault();
        var fileInfo = await file.ReadFileInfoAsync();
        name2 = fileInfo.Name;
        size2 = fileInfo.Size;
        type2 = fileInfo.Type;
        using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
        {
            var inputStream = new MemoryStream(ms.ToArray());
            imgByte2 = Convert.ToBase64String(inputStream.ToArray());
            imgData2 = "data:" + fileInfo.Type + ";base64," + imgByte2;
        }
        showDetails2 = true;

        if (showDetails1 && showDetails2)
        {
            ShowProcessButton = true;
        }
        else
        {
            ShowProcessButton = false;

        }

        ShowProcessForm = false;
        StateHasChanged();



    }

    public void ShowProcessFormClick()
    {
        ShowProcessForm = !ShowProcessForm;
        var randimWord = Guid.NewGuid().ToString("N").Substring(0, 10);
#if DEBUG
        ValidateInput.Email = randimWord + "@xyz.com";
        ValidateInput.UserName = randimWord;
#endif
    }

    async Task ComparisonProcessStart()
    {
        try
        {
            IsRunning = true;
            StateHasChanged();
            IdentificationValidationLib.API apiCalls = new IdentificationValidationLib.API();


            var endPoint = "https://pass.sterling.ng/FacialrecogAPI/VerifyTwoFaces";
            //var endPoint = "https://localhost:32389/CompareFaceUsingImageByte";
            // var endPoint = "https://localhost:32389/VerifyTwoFaces";


            ValidateInput.Base64Encoded = imgByte1;
            ValidateInput.Base64EncodedTarget = imgByte2;

            // var result = await apiCalls.Post<HelperLib.SimilarFaces, HelperLib.BaseResponse>(ValidateInput, endPoint);
            var result = await apiCalls.Post<HelperLib.Verify.VerifyResult, HelperLib.BaseResponse>(ValidateInput, endPoint);
            ShowAlerResult = true;
            if (result.isSuccess)
            {
                documentData = result.SuccessObj;
                showCompareDetails = true;
                ShowProcessForm = false;
                //showDetails1 = false;
                toastService.ShowSuccess("Successfully done");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine(result.failedObj?.Message ?? "Error");
                //AlertMessage = result.returnedStringContent;
                toastService.ShowError(result.returnedStringContent);
                showCompareDetails = false;
                ShowProcessForm = false;



            }

        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex);

            toastService.ShowError(ex.ToString());

        }
        finally
        {
            IsRunning = false;

            StateHasChanged();
        }
    }

}
