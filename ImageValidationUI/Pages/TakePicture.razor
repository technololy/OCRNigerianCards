@page "/OpenCamera"

@inject IFileReaderService fileReader;
@inject IHttpClientFactory ClientFactory



<h3>Open Camera</h3>
<style>
    img {
        border-radius: 50%;
        width: 150px;
        height: 150px;
    }
</style>
<input type="file" accept="image/*" @ref="elementReference" capture @onchange="HandleSelected" />

<br />
@if (showDetails)
{
    <div>
        <ul>
            <li>Name:@name </li>
            <li>Size:@size</li>
            <li>Type:@type</li>

        </ul>
        <img src="@imgData" alt="your image" />
    </div>

    <div class="form-group">
        <EditForm Model="@ValidateInput" OnSubmit="ProcessForOCR">
            <label>Enter email</label>
            <InputText @bind-Value="@ValidateInput.Email" />
            <label>Enter username</label>

            <InputText @bind-Value="@ValidateInput.UserName" />
            <button> Submit for OCR processing</button>
        </EditForm>
    </div>

}

@code {

    private EditContext editContext;

    ElementReference elementReference;
    string name;
    string Email;
    string UserName;
    long size;
    string type;
    string imgData;
    string imgByte;
    bool showDetails;
    Models.ValidateInputModel ValidateInput = new Models.ValidateInputModel();

    async Task HandleSelected()
    {
        var file = (await fileReader.CreateReference(elementReference).EnumerateFilesAsync()).FirstOrDefault();
        var fileInfo = await file.ReadFileInfoAsync();
        name = fileInfo.Name;
        size = fileInfo.Size;
        type = fileInfo.Type;
        using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
        {
            var inputStream = new MemoryStream(ms.ToArray());
            imgByte = Convert.ToBase64String(inputStream.ToArray());
            imgData = "data:" + fileInfo.Type + ";base64," + imgByte;
        }

        StateHasChanged();
        showDetails = true;



    }

    async Task ProcessForOCR()
    {
        try
        {
            var client = ClientFactory.CreateClient("FacialrecogAPI");
            // Models.ValidateInputModel model = new Models.ValidateInputModel { Email = Email, Base64Encoded = imgByte, UserName = UserName };
            ValidateInput.Base64Encoded = imgByte;
            var responseMessage = await client.PostAsJsonAsync<Models.ValidateInputModel>(
                 "ValidateIDCard", ValidateInput);
            if (responseMessage.IsSuccessStatusCode)
            {

            }
            else
            {

            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex);
        }
    }

}
